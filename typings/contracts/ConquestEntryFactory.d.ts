/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ConquestEntryFactoryInterface extends Interface {
  functions: {
    conquestEntryID: TypedFunctionDescription<{ encode([]: []): string }>;

    onERC1155BatchReceived: TypedFunctionDescription<{
      encode([, _from, _ids, _amounts]: [
        string,
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    onERC1155Received: TypedFunctionDescription<{
      encode([_operator, _from, _id, _amount, _data]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    silverRange: TypedFunctionDescription<{ encode([]: []): string }>;

    skyweaverAssets: TypedFunctionDescription<{ encode([]: []): string }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceID]: [Arrayish]): string;
    }>;
  };

  events: {};
}

export class ConquestEntryFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ConquestEntryFactory;
  attach(addressOrName: string): ConquestEntryFactory;
  deployed(): Promise<ConquestEntryFactory>;

  on(event: EventFilter | string, listener: Listener): ConquestEntryFactory;
  once(event: EventFilter | string, listener: Listener): ConquestEntryFactory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ConquestEntryFactory;
  removeAllListeners(eventName: EventFilter | string): ConquestEntryFactory;
  removeListener(eventName: any, listener: Listener): ConquestEntryFactory;

  interface: ConquestEntryFactoryInterface;

  functions: {
    conquestEntryID(): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      arg4: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    silverRange(): Promise<{
      min: BigNumber;
      max: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    skyweaverAssets(): Promise<string>;

    supportsInterface(interfaceID: Arrayish): Promise<boolean>;
  };

  conquestEntryID(): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: string,
    _from: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    arg4: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    _operator: string,
    _from: string,
    _id: BigNumberish,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  silverRange(): Promise<{
    min: BigNumber;
    max: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  skyweaverAssets(): Promise<string>;

  supportsInterface(interfaceID: Arrayish): Promise<boolean>;

  filters: {};

  estimate: {
    conquestEntryID(): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      arg4: Arrayish
    ): Promise<BigNumber>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;

    silverRange(): Promise<BigNumber>;

    skyweaverAssets(): Promise<BigNumber>;

    supportsInterface(interfaceID: Arrayish): Promise<BigNumber>;
  };
}
