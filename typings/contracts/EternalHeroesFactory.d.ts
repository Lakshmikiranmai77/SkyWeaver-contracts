/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface EternalHeroesFactoryInterface extends Interface {
  functions: {
    getOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_newOwner]: [string]): string;
    }>;

    registerIDs: TypedFunctionDescription<{
      encode([_ids]: [BigNumberish[]]): string;
    }>;

    deregisterIDs: TypedFunctionDescription<{
      encode([_ids]: [BigNumberish[]]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([_recipient]: [string]): string;
    }>;

    onERC1155Received: TypedFunctionDescription<{
      encode([, _from, _id, _amount, _data]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    onERC1155BatchReceived: TypedFunctionDescription<{
      encode([_operator, _from, _ids, _amounts, _data]: [
        string,
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    getPurchasableStatus: TypedFunctionDescription<{
      encode([_ids]: [BigNumberish[]]): string;
    }>;

    getFactoryManager: TypedFunctionDescription<{ encode([]: []): string }>;

    getArcadeumCoin: TypedFunctionDescription<{ encode([]: []): string }>;

    getArcadeumCoinID: TypedFunctionDescription<{ encode([]: []): string }>;

    getPrices: TypedFunctionDescription<{
      encode([_ids]: [BigNumberish[]]): string;
    }>;

    getPriceTiers: TypedFunctionDescription<{
      encode([_ids]: [BigNumberish[]]): string;
    }>;

    getSuppliesCurrentTier: TypedFunctionDescription<{
      encode([_ids]: [BigNumberish[]]): string;
    }>;

    getFloorPrice: TypedFunctionDescription<{ encode([]: []): string }>;

    getTierSize: TypedFunctionDescription<{ encode([]: []): string }>;

    getPriceIncrement: TypedFunctionDescription<{ encode([]: []): string }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceID]: [Arrayish]): string;
    }>;
  };

  events: {
    AssetsPurchased: TypedEventDescription<{
      encodeTopics([
        recipient,
        tokensBoughtIds,
        tokensBoughtAmounts,
        totalCost
      ]: [string | null, null, null, null]): string[];
    }>;

    IDsDeregistration: TypedEventDescription<{
      encodeTopics([ids]: [null]): string[];
    }>;

    IDsRegistration: TypedEventDescription<{
      encodeTopics([ids]: [null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class EternalHeroesFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): EternalHeroesFactory;
  attach(addressOrName: string): EternalHeroesFactory;
  deployed(): Promise<EternalHeroesFactory>;

  on(event: EventFilter | string, listener: Listener): EternalHeroesFactory;
  once(event: EventFilter | string, listener: Listener): EternalHeroesFactory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): EternalHeroesFactory;
  removeAllListeners(eventName: EventFilter | string): EternalHeroesFactory;
  removeListener(eventName: any, listener: Listener): EternalHeroesFactory;

  interface: EternalHeroesFactoryInterface;

  functions: {
    getOwner(): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    registerIDs(
      _ids: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deregisterIDs(
      _ids: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      _recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      _operator: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getPurchasableStatus(_ids: BigNumberish[]): Promise<boolean[]>;

    getFactoryManager(): Promise<string>;

    getArcadeumCoin(): Promise<string>;

    getArcadeumCoinID(): Promise<BigNumber>;

    getPrices(_ids: BigNumberish[]): Promise<BigNumber[]>;

    getPriceTiers(_ids: BigNumberish[]): Promise<BigNumber[]>;

    getSuppliesCurrentTier(
      _ids: BigNumberish[]
    ): Promise<{
      tiers: BigNumber[];
      supplies: BigNumber[];
      0: BigNumber[];
      1: BigNumber[];
    }>;

    getFloorPrice(): Promise<BigNumber>;

    getTierSize(): Promise<BigNumber>;

    getPriceIncrement(): Promise<BigNumber>;

    supportsInterface(interfaceID: Arrayish): Promise<boolean>;
  };

  getOwner(): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  registerIDs(
    _ids: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deregisterIDs(
    _ids: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(
    _recipient: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    _from: string,
    _id: BigNumberish,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    _operator: string,
    _from: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getPurchasableStatus(_ids: BigNumberish[]): Promise<boolean[]>;

  getFactoryManager(): Promise<string>;

  getArcadeumCoin(): Promise<string>;

  getArcadeumCoinID(): Promise<BigNumber>;

  getPrices(_ids: BigNumberish[]): Promise<BigNumber[]>;

  getPriceTiers(_ids: BigNumberish[]): Promise<BigNumber[]>;

  getSuppliesCurrentTier(
    _ids: BigNumberish[]
  ): Promise<{
    tiers: BigNumber[];
    supplies: BigNumber[];
    0: BigNumber[];
    1: BigNumber[];
  }>;

  getFloorPrice(): Promise<BigNumber>;

  getTierSize(): Promise<BigNumber>;

  getPriceIncrement(): Promise<BigNumber>;

  supportsInterface(interfaceID: Arrayish): Promise<boolean>;

  filters: {
    AssetsPurchased(
      recipient: string | null,
      tokensBoughtIds: null,
      tokensBoughtAmounts: null,
      totalCost: null
    ): EventFilter;

    IDsDeregistration(ids: null): EventFilter;

    IDsRegistration(ids: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    getOwner(): Promise<BigNumber>;

    transferOwnership(_newOwner: string): Promise<BigNumber>;

    registerIDs(_ids: BigNumberish[]): Promise<BigNumber>;

    deregisterIDs(_ids: BigNumberish[]): Promise<BigNumber>;

    withdraw(_recipient: string): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      _operator: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: Arrayish
    ): Promise<BigNumber>;

    getPurchasableStatus(_ids: BigNumberish[]): Promise<BigNumber>;

    getFactoryManager(): Promise<BigNumber>;

    getArcadeumCoin(): Promise<BigNumber>;

    getArcadeumCoinID(): Promise<BigNumber>;

    getPrices(_ids: BigNumberish[]): Promise<BigNumber>;

    getPriceTiers(_ids: BigNumberish[]): Promise<BigNumber>;

    getSuppliesCurrentTier(_ids: BigNumberish[]): Promise<BigNumber>;

    getFloorPrice(): Promise<BigNumber>;

    getTierSize(): Promise<BigNumber>;

    getPriceIncrement(): Promise<BigNumber>;

    supportsInterface(interfaceID: Arrayish): Promise<BigNumber>;
  };
}
