/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface SilverConquestFactoryInterface extends Interface {
  functions: {
    getOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_newOwner]: [string]): string;
    }>;
  };

  events: {
    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class SilverConquestFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): SilverConquestFactory;
  attach(addressOrName: string): SilverConquestFactory;
  deployed(): Promise<SilverConquestFactory>;

  on(event: EventFilter | string, listener: Listener): SilverConquestFactory;
  once(event: EventFilter | string, listener: Listener): SilverConquestFactory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): SilverConquestFactory;
  removeAllListeners(eventName: EventFilter | string): SilverConquestFactory;
  removeListener(eventName: any, listener: Listener): SilverConquestFactory;

  interface: SilverConquestFactoryInterface;

  functions: {
    getOwner(): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getOwner(): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    getOwner(): Promise<BigNumber>;

    transferOwnership(_newOwner: string): Promise<BigNumber>;
  };
}
