/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface BridgeMockInterface extends Interface {
  functions: {
    batchMint: TypedFunctionDescription<{
      encode([_to, _ids, _amounts]: [
        string,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;
  };

  events: {};
}

export class BridgeMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): BridgeMock;
  attach(addressOrName: string): BridgeMock;
  deployed(): Promise<BridgeMock>;

  on(event: EventFilter | string, listener: Listener): BridgeMock;
  once(event: EventFilter | string, listener: Listener): BridgeMock;
  addListener(eventName: EventFilter | string, listener: Listener): BridgeMock;
  removeAllListeners(eventName: EventFilter | string): BridgeMock;
  removeListener(eventName: any, listener: Listener): BridgeMock;

  interface: BridgeMockInterface;

  functions: {
    batchMint(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  batchMint(
    _to: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    batchMint(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[]
    ): Promise<BigNumber>;
  };
}
