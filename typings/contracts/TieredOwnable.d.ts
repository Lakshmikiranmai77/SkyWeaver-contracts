/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface TieredOwnableInterface extends Interface {
  functions: {
    assignOwnership: TypedFunctionDescription<{
      encode([_address, _tier]: [string, BigNumberish]): string;
    }>;

    getOwnerTier: TypedFunctionDescription<{
      encode([_owner]: [string]): string;
    }>;
  };

  events: {
    OwnershipGranted: TypedEventDescription<{
      encodeTopics([owner, previousTier, newTier]: [
        string | null,
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;
  };
}

export class TieredOwnable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): TieredOwnable;
  attach(addressOrName: string): TieredOwnable;
  deployed(): Promise<TieredOwnable>;

  on(event: EventFilter | string, listener: Listener): TieredOwnable;
  once(event: EventFilter | string, listener: Listener): TieredOwnable;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): TieredOwnable;
  removeAllListeners(eventName: EventFilter | string): TieredOwnable;
  removeListener(eventName: any, listener: Listener): TieredOwnable;

  interface: TieredOwnableInterface;

  functions: {
    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getOwnerTier(_owner: string): Promise<BigNumber>;
  };

  assignOwnership(
    _address: string,
    _tier: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getOwnerTier(_owner: string): Promise<BigNumber>;

  filters: {
    OwnershipGranted(
      owner: string | null,
      previousTier: BigNumberish | null,
      newTier: BigNumberish | null
    ): EventFilter;
  };

  estimate: {
    assignOwnership(_address: string, _tier: BigNumberish): Promise<BigNumber>;

    getOwnerTier(_owner: string): Promise<BigNumber>;
  };
}
