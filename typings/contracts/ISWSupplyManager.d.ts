/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ISWSupplyManagerInterface extends Interface {
  functions: {
    setMaxSupplies: TypedFunctionDescription<{
      encode([_ids, _supplies]: [BigNumberish[], BigNumberish[]]): string;
    }>;

    addMintPermission: TypedFunctionDescription<{
      encode([_factory, _minRange, _maxRange]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    removeMintPermission: TypedFunctionDescription<{
      encode([_factory, _rangeIndex]: [string, BigNumberish]): string;
    }>;

    activateFactory: TypedFunctionDescription<{
      encode([_factory]: [string]): string;
    }>;

    shutdownFactory: TypedFunctionDescription<{
      encode([_factory]: [string]): string;
    }>;

    lockRangeMintPermissions: TypedFunctionDescription<{
      encode([_range]: [{ minID: BigNumberish; maxID: BigNumberish }]): string;
    }>;

    batchMint: TypedFunctionDescription<{
      encode([_to, _ids, _amounts, _data]: [
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    mint: TypedFunctionDescription<{
      encode([_to, _id, _amount, _data]: [
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    getFactoryStatus: TypedFunctionDescription<{
      encode([_factory]: [string]): string;
    }>;

    getFactoryAccessRanges: TypedFunctionDescription<{
      encode([_factory]: [string]): string;
    }>;

    getMaxSupplies: TypedFunctionDescription<{
      encode([_ids]: [BigNumberish[]]): string;
    }>;

    getCurrentSupplies: TypedFunctionDescription<{
      encode([_ids]: [BigNumberish[]]): string;
    }>;
  };

  events: {
    FactoryActivation: TypedEventDescription<{
      encodeTopics([factory]: [string | null]): string[];
    }>;

    FactoryShutdown: TypedEventDescription<{
      encodeTopics([factory]: [string | null]): string[];
    }>;

    MintPermissionAdded: TypedEventDescription<{
      encodeTopics([factory, new_range]: [string | null, null]): string[];
    }>;

    MintPermissionRemoved: TypedEventDescription<{
      encodeTopics([factory, deleted_range]: [string | null, null]): string[];
    }>;
  };
}

export class ISWSupplyManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ISWSupplyManager;
  attach(addressOrName: string): ISWSupplyManager;
  deployed(): Promise<ISWSupplyManager>;

  on(event: EventFilter | string, listener: Listener): ISWSupplyManager;
  once(event: EventFilter | string, listener: Listener): ISWSupplyManager;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ISWSupplyManager;
  removeAllListeners(eventName: EventFilter | string): ISWSupplyManager;
  removeListener(eventName: any, listener: Listener): ISWSupplyManager;

  interface: ISWSupplyManagerInterface;

  functions: {
    setMaxSupplies(
      _ids: BigNumberish[],
      _supplies: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addMintPermission(
      _factory: string,
      _minRange: BigNumberish,
      _maxRange: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeMintPermission(
      _factory: string,
      _rangeIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    activateFactory(
      _factory: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    shutdownFactory(
      _factory: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    lockRangeMintPermissions(
      _range: { minID: BigNumberish; maxID: BigNumberish },
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    batchMint(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    mint(
      _to: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getFactoryStatus(_factory: string): Promise<boolean>;

    getFactoryAccessRanges(
      _factory: string
    ): Promise<{ minID: BigNumber; maxID: BigNumber }[]>;

    getMaxSupplies(_ids: BigNumberish[]): Promise<BigNumber[]>;

    getCurrentSupplies(_ids: BigNumberish[]): Promise<BigNumber[]>;
  };

  setMaxSupplies(
    _ids: BigNumberish[],
    _supplies: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addMintPermission(
    _factory: string,
    _minRange: BigNumberish,
    _maxRange: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeMintPermission(
    _factory: string,
    _rangeIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  activateFactory(
    _factory: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  shutdownFactory(
    _factory: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  lockRangeMintPermissions(
    _range: { minID: BigNumberish; maxID: BigNumberish },
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  batchMint(
    _to: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  mint(
    _to: string,
    _id: BigNumberish,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getFactoryStatus(_factory: string): Promise<boolean>;

  getFactoryAccessRanges(
    _factory: string
  ): Promise<{ minID: BigNumber; maxID: BigNumber }[]>;

  getMaxSupplies(_ids: BigNumberish[]): Promise<BigNumber[]>;

  getCurrentSupplies(_ids: BigNumberish[]): Promise<BigNumber[]>;

  filters: {
    FactoryActivation(factory: string | null): EventFilter;

    FactoryShutdown(factory: string | null): EventFilter;

    MintPermissionAdded(factory: string | null, new_range: null): EventFilter;

    MintPermissionRemoved(
      factory: string | null,
      deleted_range: null
    ): EventFilter;
  };

  estimate: {
    setMaxSupplies(
      _ids: BigNumberish[],
      _supplies: BigNumberish[]
    ): Promise<BigNumber>;

    addMintPermission(
      _factory: string,
      _minRange: BigNumberish,
      _maxRange: BigNumberish
    ): Promise<BigNumber>;

    removeMintPermission(
      _factory: string,
      _rangeIndex: BigNumberish
    ): Promise<BigNumber>;

    activateFactory(_factory: string): Promise<BigNumber>;

    shutdownFactory(_factory: string): Promise<BigNumber>;

    lockRangeMintPermissions(_range: {
      minID: BigNumberish;
      maxID: BigNumberish;
    }): Promise<BigNumber>;

    batchMint(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: Arrayish
    ): Promise<BigNumber>;

    mint(
      _to: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;

    getFactoryStatus(_factory: string): Promise<BigNumber>;

    getFactoryAccessRanges(_factory: string): Promise<BigNumber>;

    getMaxSupplies(_ids: BigNumberish[]): Promise<BigNumber>;

    getCurrentSupplies(_ids: BigNumberish[]): Promise<BigNumber>;
  };
}
