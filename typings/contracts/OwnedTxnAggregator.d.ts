/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface OwnedTxnAggregatorInterface extends Interface {
  functions: {
    getOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_newOwner]: [string]): string;
    }>;

    executeTxns: TypedFunctionDescription<{
      encode([_txns, _revert]: [
        { dest: string; data: Arrayish }[],
        boolean
      ]): string;
    }>;

    singleContract_executeTxns: TypedFunctionDescription<{
      encode([_contract, _txns, _revert]: [
        string,
        Arrayish[],
        boolean
      ]): string;
    }>;

    viewTxns: TypedFunctionDescription<{
      encode([_txns]: [{ dest: string; data: Arrayish }[]]): string;
    }>;
  };

  events: {
    Error: TypedEventDescription<{
      encodeTopics([tx_id, error]: [null, null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class OwnedTxnAggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): OwnedTxnAggregator;
  attach(addressOrName: string): OwnedTxnAggregator;
  deployed(): Promise<OwnedTxnAggregator>;

  on(event: EventFilter | string, listener: Listener): OwnedTxnAggregator;
  once(event: EventFilter | string, listener: Listener): OwnedTxnAggregator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): OwnedTxnAggregator;
  removeAllListeners(eventName: EventFilter | string): OwnedTxnAggregator;
  removeListener(eventName: any, listener: Listener): OwnedTxnAggregator;

  interface: OwnedTxnAggregatorInterface;

  functions: {
    getOwner(): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    executeTxns(
      _txns: { dest: string; data: Arrayish }[],
      _revert: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    singleContract_executeTxns(
      _contract: string,
      _txns: Arrayish[],
      _revert: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    viewTxns(_txns: { dest: string; data: Arrayish }[]): Promise<string[]>;
  };

  getOwner(): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  executeTxns(
    _txns: { dest: string; data: Arrayish }[],
    _revert: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  singleContract_executeTxns(
    _contract: string,
    _txns: Arrayish[],
    _revert: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  viewTxns(_txns: { dest: string; data: Arrayish }[]): Promise<string[]>;

  filters: {
    Error(tx_id: null, error: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    getOwner(): Promise<BigNumber>;

    transferOwnership(_newOwner: string): Promise<BigNumber>;

    executeTxns(
      _txns: { dest: string; data: Arrayish }[],
      _revert: boolean
    ): Promise<BigNumber>;

    singleContract_executeTxns(
      _contract: string,
      _txns: Arrayish[],
      _revert: boolean
    ): Promise<BigNumber>;

    viewTxns(_txns: { dest: string; data: Arrayish }[]): Promise<BigNumber>;
  };
}
