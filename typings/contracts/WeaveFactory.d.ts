/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface WeaveFactoryInterface extends Interface {
  functions: {
    getOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_newOwner]: [string]): string;
    }>;

    harvestWeave: TypedFunctionDescription<{
      encode([_recipient, _data]: [string, Arrayish]): string;
    }>;

    getSkyweaverCurrencies: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getWeaveID: TypedFunctionDescription<{ encode([]: []): string }>;

    getWeavePerSecond: TypedFunctionDescription<{ encode([]: []): string }>;

    getLastHarvest: TypedFunctionDescription<{ encode([]: []): string }>;

    getAvailableWeave: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    WeaveHarvested: TypedEventDescription<{
      encodeTopics([recipient, amount]: [null, null]): string[];
    }>;
  };
}

export class WeaveFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): WeaveFactory;
  attach(addressOrName: string): WeaveFactory;
  deployed(): Promise<WeaveFactory>;

  on(event: EventFilter | string, listener: Listener): WeaveFactory;
  once(event: EventFilter | string, listener: Listener): WeaveFactory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): WeaveFactory;
  removeAllListeners(eventName: EventFilter | string): WeaveFactory;
  removeListener(eventName: any, listener: Listener): WeaveFactory;

  interface: WeaveFactoryInterface;

  functions: {
    getOwner(): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    harvestWeave(
      _recipient: string,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getSkyweaverCurrencies(): Promise<string>;

    getWeaveID(): Promise<BigNumber>;

    getWeavePerSecond(): Promise<BigNumber>;

    getLastHarvest(): Promise<BigNumber>;

    getAvailableWeave(): Promise<BigNumber>;
  };

  getOwner(): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  harvestWeave(
    _recipient: string,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getSkyweaverCurrencies(): Promise<string>;

  getWeaveID(): Promise<BigNumber>;

  getWeavePerSecond(): Promise<BigNumber>;

  getLastHarvest(): Promise<BigNumber>;

  getAvailableWeave(): Promise<BigNumber>;

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    WeaveHarvested(recipient: null, amount: null): EventFilter;
  };

  estimate: {
    getOwner(): Promise<BigNumber>;

    transferOwnership(_newOwner: string): Promise<BigNumber>;

    harvestWeave(_recipient: string, _data: Arrayish): Promise<BigNumber>;

    getSkyweaverCurrencies(): Promise<BigNumber>;

    getWeaveID(): Promise<BigNumber>;

    getWeavePerSecond(): Promise<BigNumber>;

    getLastHarvest(): Promise<BigNumber>;

    getAvailableWeave(): Promise<BigNumber>;
  };
}
