/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface GoldCardsFactoryInterface extends Interface {
  functions: {
    getOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_newOwner]: [string]): string;
    }>;

    registerIDs: TypedFunctionDescription<{
      encode([_ids]: [BigNumberish[]]): string;
    }>;

    deregisterIDs: TypedFunctionDescription<{
      encode([_ids, _cardPoolIndexes]: [
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    updateGoldPrice: TypedFunctionDescription<{
      encode([_newPrice]: [BigNumberish]): string;
    }>;

    updateGoldRefund: TypedFunctionDescription<{
      encode([_newRefund]: [BigNumberish]): string;
    }>;

    updateRNGDelay: TypedFunctionDescription<{
      encode([_newDelay]: [BigNumberish]): string;
    }>;

    onERC1155Received: TypedFunctionDescription<{
      encode([_operator, _from, _id, _amount, _data]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    onERC1155BatchReceived: TypedFunctionDescription<{
      encode([, _from, _ids, _amounts, _data]: [
        string,
        string,
        BigNumberish[],
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    recommit: TypedFunctionDescription<{
      encode([_order]: [
        {
          cardRecipient: string;
          feeRecipient: string;
          cardAmount: BigNumberish;
          feeAmount: BigNumberish;
          rngBlock: BigNumberish;
        }
      ]): string;
    }>;

    mineGolds: TypedFunctionDescription<{
      encode([_order, _ids, _indexes]: [
        {
          cardRecipient: string;
          feeRecipient: string;
          cardAmount: BigNumberish;
          feeAmount: BigNumberish;
          rngBlock: BigNumberish;
        },
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    getPurchasableStatus: TypedFunctionDescription<{
      encode([_ids]: [BigNumberish[]]): string;
    }>;

    getOrderStatuses: TypedFunctionDescription<{
      encode([_orderHashes]: [Arrayish[]]): string;
    }>;

    getRNGSeed: TypedFunctionDescription<{
      encode([_order]: [
        {
          cardRecipient: string;
          feeRecipient: string;
          cardAmount: BigNumberish;
          feeAmount: BigNumberish;
          rngBlock: BigNumberish;
        }
      ]): string;
    }>;

    getCardPool: TypedFunctionDescription<{ encode([]: []): string }>;

    getFactoryManager: TypedFunctionDescription<{ encode([]: []): string }>;

    getWeave: TypedFunctionDescription<{ encode([]: []): string }>;

    getWeaveID: TypedFunctionDescription<{ encode([]: []): string }>;

    getGoldPrice: TypedFunctionDescription<{ encode([]: []): string }>;

    getGoldRefund: TypedFunctionDescription<{ encode([]: []): string }>;

    getRNGDelay: TypedFunctionDescription<{ encode([]: []): string }>;

    validateRandomCards: TypedFunctionDescription<{
      encode([_seed, _ids, _indexes]: [
        Arrayish,
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    getRandomCards: TypedFunctionDescription<{
      encode([_seed, _amount]: [Arrayish, BigNumberish]): string;
    }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceID]: [Arrayish]): string;
    }>;
  };

  events: {
    GoldPriceChanged: TypedEventDescription<{
      encodeTopics([oldPrice, newPrice]: [null, null]): string[];
    }>;

    GoldRefundChanged: TypedEventDescription<{
      encodeTopics([oldRefund, newRefund]: [null, null]): string[];
    }>;

    IDsDeregistration: TypedEventDescription<{
      encodeTopics([ids]: [null]): string[];
    }>;

    IDsRegistration: TypedEventDescription<{
      encodeTopics([ids]: [null]): string[];
    }>;

    OrderCommited: TypedEventDescription<{
      encodeTopics([order]: [null]): string[];
    }>;

    OrderFulfilled: TypedEventDescription<{
      encodeTopics([orderHash]: [null]): string[];
    }>;

    OrderRecommitted: TypedEventDescription<{
      encodeTopics([order]: [null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    RNGDelayChanged: TypedEventDescription<{
      encodeTopics([oldDelay, newDelay]: [null, null]): string[];
    }>;
  };
}

export class GoldCardsFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): GoldCardsFactory;
  attach(addressOrName: string): GoldCardsFactory;
  deployed(): Promise<GoldCardsFactory>;

  on(event: EventFilter | string, listener: Listener): GoldCardsFactory;
  once(event: EventFilter | string, listener: Listener): GoldCardsFactory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): GoldCardsFactory;
  removeAllListeners(eventName: EventFilter | string): GoldCardsFactory;
  removeListener(eventName: any, listener: Listener): GoldCardsFactory;

  interface: GoldCardsFactoryInterface;

  functions: {
    getOwner(): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    registerIDs(
      _ids: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deregisterIDs(
      _ids: BigNumberish[],
      _cardPoolIndexes: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateGoldPrice(
      _newPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateGoldRefund(
      _newRefund: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateRNGDelay(
      _newDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    recommit(
      _order: {
        cardRecipient: string;
        feeRecipient: string;
        cardAmount: BigNumberish;
        feeAmount: BigNumberish;
        rngBlock: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    mineGolds(
      _order: {
        cardRecipient: string;
        feeRecipient: string;
        cardAmount: BigNumberish;
        feeAmount: BigNumberish;
        rngBlock: BigNumberish;
      },
      _ids: BigNumberish[],
      _indexes: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getPurchasableStatus(_ids: BigNumberish[]): Promise<boolean[]>;

    getOrderStatuses(_orderHashes: Arrayish[]): Promise<boolean[]>;

    getRNGSeed(_order: {
      cardRecipient: string;
      feeRecipient: string;
      cardAmount: BigNumberish;
      feeAmount: BigNumberish;
      rngBlock: BigNumberish;
    }): Promise<string>;

    getCardPool(): Promise<BigNumber[]>;

    getFactoryManager(): Promise<string>;

    getWeave(): Promise<string>;

    getWeaveID(): Promise<BigNumber>;

    getGoldPrice(): Promise<BigNumber>;

    getGoldRefund(): Promise<BigNumber>;

    getRNGDelay(): Promise<BigNumber>;

    validateRandomCards(
      _seed: Arrayish,
      _ids: BigNumberish[],
      _indexes: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getRandomCards(
      _seed: Arrayish,
      _amount: BigNumberish
    ): Promise<BigNumber[]>;

    supportsInterface(interfaceID: Arrayish): Promise<boolean>;
  };

  getOwner(): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  registerIDs(
    _ids: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deregisterIDs(
    _ids: BigNumberish[],
    _cardPoolIndexes: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateGoldPrice(
    _newPrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateGoldRefund(
    _newRefund: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateRNGDelay(
    _newDelay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    _operator: string,
    _from: string,
    _id: BigNumberish,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: string,
    _from: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  recommit(
    _order: {
      cardRecipient: string;
      feeRecipient: string;
      cardAmount: BigNumberish;
      feeAmount: BigNumberish;
      rngBlock: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  mineGolds(
    _order: {
      cardRecipient: string;
      feeRecipient: string;
      cardAmount: BigNumberish;
      feeAmount: BigNumberish;
      rngBlock: BigNumberish;
    },
    _ids: BigNumberish[],
    _indexes: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getPurchasableStatus(_ids: BigNumberish[]): Promise<boolean[]>;

  getOrderStatuses(_orderHashes: Arrayish[]): Promise<boolean[]>;

  getRNGSeed(_order: {
    cardRecipient: string;
    feeRecipient: string;
    cardAmount: BigNumberish;
    feeAmount: BigNumberish;
    rngBlock: BigNumberish;
  }): Promise<string>;

  getCardPool(): Promise<BigNumber[]>;

  getFactoryManager(): Promise<string>;

  getWeave(): Promise<string>;

  getWeaveID(): Promise<BigNumber>;

  getGoldPrice(): Promise<BigNumber>;

  getGoldRefund(): Promise<BigNumber>;

  getRNGDelay(): Promise<BigNumber>;

  validateRandomCards(
    _seed: Arrayish,
    _ids: BigNumberish[],
    _indexes: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getRandomCards(_seed: Arrayish, _amount: BigNumberish): Promise<BigNumber[]>;

  supportsInterface(interfaceID: Arrayish): Promise<boolean>;

  filters: {
    GoldPriceChanged(oldPrice: null, newPrice: null): EventFilter;

    GoldRefundChanged(oldRefund: null, newRefund: null): EventFilter;

    IDsDeregistration(ids: null): EventFilter;

    IDsRegistration(ids: null): EventFilter;

    OrderCommited(order: null): EventFilter;

    OrderFulfilled(orderHash: null): EventFilter;

    OrderRecommitted(order: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RNGDelayChanged(oldDelay: null, newDelay: null): EventFilter;
  };

  estimate: {
    getOwner(): Promise<BigNumber>;

    transferOwnership(_newOwner: string): Promise<BigNumber>;

    registerIDs(_ids: BigNumberish[]): Promise<BigNumber>;

    deregisterIDs(
      _ids: BigNumberish[],
      _cardPoolIndexes: BigNumberish[]
    ): Promise<BigNumber>;

    updateGoldPrice(_newPrice: BigNumberish): Promise<BigNumber>;

    updateGoldRefund(_newRefund: BigNumberish): Promise<BigNumber>;

    updateRNGDelay(_newDelay: BigNumberish): Promise<BigNumber>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      _from: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: Arrayish
    ): Promise<BigNumber>;

    recommit(_order: {
      cardRecipient: string;
      feeRecipient: string;
      cardAmount: BigNumberish;
      feeAmount: BigNumberish;
      rngBlock: BigNumberish;
    }): Promise<BigNumber>;

    mineGolds(
      _order: {
        cardRecipient: string;
        feeRecipient: string;
        cardAmount: BigNumberish;
        feeAmount: BigNumberish;
        rngBlock: BigNumberish;
      },
      _ids: BigNumberish[],
      _indexes: BigNumberish[]
    ): Promise<BigNumber>;

    getPurchasableStatus(_ids: BigNumberish[]): Promise<BigNumber>;

    getOrderStatuses(_orderHashes: Arrayish[]): Promise<BigNumber>;

    getRNGSeed(_order: {
      cardRecipient: string;
      feeRecipient: string;
      cardAmount: BigNumberish;
      feeAmount: BigNumberish;
      rngBlock: BigNumberish;
    }): Promise<BigNumber>;

    getCardPool(): Promise<BigNumber>;

    getFactoryManager(): Promise<BigNumber>;

    getWeave(): Promise<BigNumber>;

    getWeaveID(): Promise<BigNumber>;

    getGoldPrice(): Promise<BigNumber>;

    getGoldRefund(): Promise<BigNumber>;

    getRNGDelay(): Promise<BigNumber>;

    validateRandomCards(
      _seed: Arrayish,
      _ids: BigNumberish[],
      _indexes: BigNumberish[]
    ): Promise<BigNumber>;

    getRandomCards(_seed: Arrayish, _amount: BigNumberish): Promise<BigNumber>;

    supportsInterface(interfaceID: Arrayish): Promise<BigNumber>;
  };
}
